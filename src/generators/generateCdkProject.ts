import fs from "fs-extra";
import path from "path";
import { GenerateInfraInput } from "../validation/generateSchema";

const templatesDir = path.join(__dirname, "../templates");

export const generateCdkProject = async ({
  projectName,
  region,
  services,
  language,
}: GenerateInfraInput): Promise<void> => {
  const projectDir = path.join(process.cwd(), "generated", projectName);

  // Step 1: Clean & recreate project directory
  await fs.remove(projectDir);
  await fs.ensureDir(projectDir);

  // Step 2: Basic CDK files
  await fs.writeFile(
    path.join(projectDir, "cdk.json"),
    JSON.stringify({
      app: "npx ts-node bin/" + projectName + ".ts",
    }, null, 2)
  );

  await fs.writeFile(
    path.join(projectDir, "tsconfig.json"),
    JSON.stringify({
      compilerOptions: {
        target: "ES2021",
        module: "CommonJS",
        strict: true,
        esModuleInterop: true,
        skipLibCheck: true,
        forceConsistentCasingInFileNames: true,
      },
    }, null, 2)
  );

  await fs.writeFile(
    path.join(projectDir, "package.json"),
    JSON.stringify({
      name: projectName,
      version: "0.1.0",
      dependencies: {
        "aws-cdk-lib": "^2.130.0",
        constructs: "^10.3.0",
      },
      devDependencies: {
        "ts-node": "^10.9.1",
        typescript: "^5.3.3",
      },
    }, null, 2)
  );

  // Step 3: bin file
  const binPath = path.join(projectDir, "bin");
  await fs.ensureDir(binPath);

  const stackImports = services.map(s => `import { ${capitalize(s)}Stack } from '../lib/${s}-stack';`).join("\n");
  const stackInits = services.map(s => `new ${capitalize(s)}Stack(app, '${capitalize(s)}Stack', { env });`).join("\n");

  const binContent = `
import * as cdk from 'aws-cdk-lib';
${stackImports}

const app = new cdk.App();
const env = { region: '${region}' };
${stackInits}
`;

  await fs.writeFile(path.join(binPath, `${projectName}.ts`), binContent.trim());

  // Step 4: lib/ service stacks
  const libPath = path.join(projectDir, "lib");
  await fs.ensureDir(libPath);

  for (const service of services) {
    const template = await fs.readFile(path.join(templatesDir, `${service}-stack.ts`), "utf-8");
    await fs.writeFile(path.join(libPath, `${service}-stack.ts`), template);
  }

  // Step 5: Add README
  await fs.writeFile(path.join(projectDir, "README.md"), `# ${projectName}\nGenerated by StackShifter ðŸš€`);

  console.log(`âœ… Project generated at: ${projectDir}`);
};

const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);
